name: Batch Video Builder Test

on:
    # Run Via a webhook only
    repository_dispatch:
        types: [video_builder_test]

env:

  # ╭──────────────────────────────────────────────────────────╮
  # │                       Variables                          │
  # ╰──────────────────────────────────────────────────────────╯
  CONFIG: ${{ github.event.client_payload.pppff_control_config_b64 }}
  REPEAT: ${{ github.event.client_payload.pppff_repeats }}
  SERVER: "media.londonparkour.com"
  TARGET_ROOT_FOLDER: "/var/www/vhosts/media.londonparkour.com/processed/batch_processed"

  # NCS - No Copyright Sounds - Electronic Copyright Free - NCS Arcade. (Has vocals)
  # https://www.youtube.com/playlist?list=PLRBp0Fe2GpglvwYma4hf0fJy0sWaNY_CL

  # RFM - Royalty Free Music - EDM Music (Has vocals)
  # https://www.youtube.com/playlist?list=PLmurGgZIgor4a3gO1_L8OyR89sJW5g6Vz

  # HipHop & Rap Music - Audio Library
  YOUTUBE_AUDIO_PLAYLIST: "https://www.youtube.com/playlist?list=PLzCxunOM5WFKNv_NaoVO6DWNkR3K8K9WC"

jobs:

    # ╭───────────────────────────────────────────────────────╮
    # │  Test run that checks that a config file is being sent  │
    # ╰───────────────────────────────────────────────────────╯
    run_test:
        container:
            image: ioroot1/video_builder:latest

        steps:

          - name: set payload
            run: echo $CONFIG | base64 --decode > config.json

          - name: Print decoded payload
            run: |
              cat config.json

          - name: versions
            run: |
              ffmpeg -version
              ffprobe -version
              yt-dlp --version
              rclone --version



    # create_matrix:
    #     runs-on: ubuntu-latest
    #     outputs:
    #         matrix: ${{ steps.set-matrix.outputs.matrix }}
    #     steps:
    #         - name: install dependencies
    #           run: |
    #               sudo apt-get update 
    #               sudo apt-get install --no-install-recommends jq

    #         - name: rclone
    #           uses: wei/rclone@v1
    #           env:
    #               RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
    #           with:
    #               args: lsf GDrive:${GDRIVE_SOURCE_FOLDER} | tr -d '//' | head -n 20 > ./folderlist.txt

    #         - id: set-matrix
    #           run: |
    #               printf "matrix={\"include\":[" > ./matrix_file.txt
    #               cat ./folderlist.txt | while read LINE; do printf "{\"project\":\"%s\"}," $LINE >> ./matrix_file.txt ;done
    #               printf "]}" >> ./matrix_file.txt
    #               cat ./matrix_file.txt >> $GITHUB_OUTPUT
        
    # run_ffmpeg:
    #     needs: create_matrix
    #     runs-on: ubuntu-latest
    #     continue-on-error: true
    #     strategy:
    #         fail-fast: false
    #         matrix: ${{ fromJSON(needs.create_matrix.outputs.matrix) }}
    #     steps:
    #         - name: Matrix Echo
    #           run: |
    #               echo ${{ matrix.project }}

    #         - name: install dependencies
    #           run: |
    #               sudo apt-get update 
    #               sudo apt-get install --no-install-recommends rclone ssh sshpass sed

    #         - name: Checkout Repo
    #           uses: actions/checkout@v3

    #         - name: rclone copy to runner
    #           uses: wei/rclone@v1
    #           env:
    #               RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
    #           with:
    #               args: copy GDrive:${{ env.GDRIVE_SOURCE_FOLDER }}/${{ matrix.project }} ./${{ matrix.project }}

    #         - name: read config.json
    #           run: |
    #               cd ./${{ matrix.project }}
    #               if [ ! -f "./config.json" ]; then sudo cp ../.github/workflows/default_config.json ./config.json; fi
    #               sudo mv ./* ../
    #               cd ${GITHUB_WORKSPACE}
    #               cat ./config.json

    #         - uses: FedericoCarboni/setup-ffmpeg@v2
    #         - name: setup ffmpeg
    #           run: |
    #               cd /usr/local/bin
    #               env
    #               ln -s /opt/hostedtoolcache/ffmpeg/*/x64/ffmpeg ./ffmpeg
    #               ln -s /opt/hostedtoolcache/ffmpeg/*/x64/ffprobe ./ffprobe

    #         #   # SSH ----------------------
    #         # - name: Setup upterm session
    #         #   uses: lhotari/action-upterm@v1
    #         #   # SSH ----------------------

    #         # Use sudo otherwise permissions to /tmp won't work in runner
    #         # export PATH to allow shell variable become environment variable for subshells to work.
    #         - name: run ffmpeg template
    #           run: |
    #               cd ${GITHUB_WORKSPACE}
    #               mkdir -p ${GITHUB_WORKSPACE}/processed_video
    #               export PATH=$PATH:$(pwd)
    #               sudo PROJECT="${{ matrix.project }}" ./scriptflow.sh --config $(realpath ./config.json) -t
    #               [ ! -f output.mp4 ] || mv output.mp4 ${GITHUB_WORKSPACE}/processed_video
    #               [ ! -f ff_thumbnail-01.png ] || mv ff_thumbnail-01.png ${GITHUB_WORKSPACE}/processed_video/thumbnail.png
    #               ls -la
    #               ls -la ${GITHUB_WORKSPACE}/processed_video

    #         - name: download music
    #           continue-on-error: true
    #           run: |
    #               cd ${GITHUB_WORKSPACE}/processed_video
    #               sudo curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o ./yt-dlp
    #               sudo chmod a+rx ./yt-dlp
    #               sudo ./yt-dlp ${{ env.YOUTUBE_AUDIO_PLAYLIST }} --playlist-random --max-downloads 1 --restrict-filenames --trim-filenames 20 --extract-audio --audio-format mp3 --postprocessor-args "-ss 00:00:00.00 -t 00:01:00.00" --output music.mp3 --force-overwrites || true

    #         - name: overlay music
    #           continue-on-error: true
    #           run: |
    #               cd ${GITHUB_WORKSPACE}/processed_video
    #               sudo ffmpeg -i output.mp4 -i music.mp3 -c:v copy -map 0:v:0 -map 1:a:0 -shortest overlaid_music.mp4
    #               ls -la ${GITHUB_WORKSPACE}/processed_video
    #               sudo rm -f ./yt-dlp
    #               sudo rm -f ./music.mp3
    #               sudo rm -f ./output.mp4

    #         - name: reformat for instagram
    #           run: |
    #               cd ${GITHUB_WORKSPACE}/processed_video
    #               sudo ffmpeg -i overlaid_music.mp4 -pix_fmt yuv420p processed.mp4
    #               sudo rm -f overlaid_music.mp4
    #               ls -la ${GITHUB_WORKSPACE}/processed_video

    #         - name: rclone copy result back to google drive
    #           uses: wei/rclone@v1
    #           env:
    #               RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
    #           with:
    #               args: copy ./processed_video GDrive:${GDRIVE_TARGET_FOLDER}/${{ matrix.project }}

    #         - name: Copy Video to Server
    #           run: |
    #               mkdir ~/.ssh
    #               ssh-keyscan -H ${{env.SERVER}} >> ~/.ssh/known_hosts

    #               SOURCE_DIR="./processed_video"
    #               TARGET_DIR="${TARGET_ROOT_FOLDER}/${{ matrix.project }}"

    #               echo "SOURCE DIR: ${SOURCE_DIR}"
    #               echo "TARGET DIR: ${TARGET_DIR}"

    #               sshpass -p '${{secrets.SSH_PASS}}' ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{secrets.SSH_USER}}@${{env.SERVER}} "mkdir -p ${TARGET_DIR}"
    #               cd ${SOURCE_DIR}
    #               sshpass -p '${{secrets.SSH_PASS}}' scp -v -p -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null * ${{secrets.SSH_USER}}@${{env.SERVER}}:${TARGET_DIR}

    #         - name: Update google sheet with processed video folder
    #           run: |
    #               cat ./config.json
    #               CATEGORY=$(cat ./config.json | sudo jq -c '.category' | tr -d '"' )
    #               echo $CATEGORY
    #               SCHEDULE=$(cat ./config.json | sudo jq -c '.schedule' | tr -d '"' )
    #               echo $SCHEDULE
    #               VIDEOURL="http://media.londonparkour.com/processed/batch_processed/${{ matrix.project }}/processed.mp4"
    #               echo "${{ env.APPS_SCRIPT }}?category=%22${CATEGORY}%22&auto_schedule=%22${SCHEDULE}%22&video_url=%22${VIDEOURL}%22"
    #               curl "${{ env.APPS_SCRIPT }}?category=%22${CATEGORY}%22&auto_schedule=%22${SCHEDULE}%22&video_url=%22${VIDEOURL}%22"

    #         - name: rclone archive videos
    #           uses: wei/rclone@v1
    #           env:
    #               RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
    #           with:
    #               args: moveto GDrive:${GDRIVE_SOURCE_FOLDER}/${{ matrix.project }} GDrive:${GDRIVE_ARCHIVE_FOLDER}/${{ matrix.project }}
